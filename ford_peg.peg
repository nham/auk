# Adapted from Bryan Ford's paper: "Parsing Expression 
# Grammars: A Recognition-Based Syntactic Foundation"

# Hierarchical syntax
Grammar    = SP (Definition SP)+ EndOfFile
Definition = Identifier SP '=' SP Expression

Expression = Sequence (SP '/' SP Sequence)*
Sequence   = (PRED? SP Primary SP AMOUNT?)*
Primary    = Identifier !(SP '=')
            / '(' SP Expression SP ')'
            / Literal
            / Class
            / '.'

# Lexical syntax
Identifier = IdentStart IdentSym*
IdentStart = [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]
IdentSym   = IdentStart / [0123456789]

Literal    = QUOTE (!QUOTE Char)* QUOTE

Class      = LSQUARE (!RSQUARE Char)* RSQUARE
Char       = '\\' [nrt'"\[\]\\]
            / !'\\' .

AMOUNT = '?' / '*' / '+'
PRED   = '&' / '!'

LSQUARE   = '['
RSQUARE   = ']'
QUOTE     = [']

SP = (Space / Comment)*
Comment = '#' (!EndOfLine .)* EndOfLine
Space   = ' ' / '\t' / EndOfLine
EndOfLine = '\r\n' / '\n' / '\r'
EndOfFile = !.
